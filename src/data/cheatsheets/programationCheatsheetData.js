const programationCheatsheetsData = [   //rodeas de doble ** ** para mostrar texto azul y "" para mostar en negrita. Se encarta formattedTextComponent
  {title:"Hello, world",
    text:`La imagen muestra la estructura básica de un programa en Java, específicamente el clásico programa "Hello World"`,
    text1:`En Java, el nombre de la clase debe coincidir con el nombre del archivo (en este caso, HelloWorld.java). La clase se define usando la palabra clave "public class+, seguida del nombre de la clase.`,
    text2:`"public static void main(String[] args)" es el método principal de un programa Java. Es el punto de entrada de cualquier aplicación Java; es decir, es el primer método que se ejecuta cuando inicias el programa.`,
    textSub2a:`"public": Hace que el método sea accesible desde cualquier lugar.`,
    textSub2b:`"static": Permite que el método se ejecute sin crear una instancia de la clase.`,
    textSub2c:`"void": Indica que el método no retorna ningún valor.`,
    textSub2d:`"main": Es el nombre específico que Java busca como punto de entrada en una aplicación.`,
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246072/1_nr7e1o.png",
  },
  {title:"Editar, Compilar y Ejecutar",
    text:"Este flujo es esencial para convertir el código fuente que escribes en un editor de texto en un programa ejecutable que la máquina pueda entender y ejecutar. ",
    text1:`"Edición (Editing): "`,
      textSub1a:`-"Editor": Usas cualquier editor de texto (como VSCode, IntelliJ IDEA, Eclipse, o un simple editor de texto) para crear tu programa.`,
      textSub1b:`-"Archivo de código fuente": Escribes el código en un archivo con extensión .java. En este caso, el archivo se llama HelloWorld.java.`,
      textSub1c:`-"Contenido": Este archivo contiene el código fuente del programa en Java, que es el texto que escribes para definir la lógica y comportamiento del programa.`,
    text2:`"Compilación (Compiling):"`,
      textSub2a:`-"Compilador (javac)": Utilizas el compilador de Java, llamado javac, para traducir el código fuente a un formato que la máquina pueda entender.`,
      textSub2b:`-"Comando": En la terminal o línea de comandos, ejecutas javac HelloWorld.java para compilar el programa.`,
      textSub2c:`-"Archivo de bytecode": Si la compilación es exitosa, se genera un archivo HelloWorld.class, que contiene el bytecode de Java. Este bytecode es una versión traducida del programa, escrita en un lenguaje que la máquina virtual de Java (JVM) puede interpretar.`,
    text3:`"Ejecución (Executing): "`,
      textSub3a:`-"Java Virtual Machine (JVM)": Usas la JVM para ejecutar el archivo .class que contiene el bytecode.`,
      textSub3b:`-"Comando": En la terminal, ejecutas java HelloWorld (sin la extensión .class) para iniciar el programa.`,
      textSub3c:`-"Resultado (Output)": La JVM interpreta el bytecode y ejecuta el programa, mostrando el resultado en la consola. En este caso, la salida sería "Hello, World".`,
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246073/2_hfpjns.png",
  },
  {title:"TIpos de datos primitivos",
    text:"Se refieren a los tipos de datos básicos que están integrados en el lenguaje. Estos tipos de datos se usan para almacenar valores simples y no son objetos, lo que significa que no tienen métodos asociados y **están diseñados para ser eficientes en términos de memoria y rendimiento**.",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730417728/3.2_vs7gng.png",
    url1:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246071/3_yiwcjk.png",
  },
  {title:"Declarar y asignar",
    text:"En Java, para declarar una variable, primero especificas su tipo de datos y luego el nombre de la variable.",
    text1:"Se puede declarar una variable sin haberle asignado un valor para hacerlo más adelante o se puedes declarar e inicializar una variable al mismo tiempo",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246069/4_kbkuog.png",
  },
  {title:"Enteros(integers)",
    text:"Son un tipo de dato numérico que representa números enteros, es decir, números sin decimales. Los enteros tienen un rango específico que depende del número de bits asignados para almacenarlos; en Java, un int ocupa 32 bits (4 bytes) y puede representar valores desde -2,147,483,648 hasta 2,147,483,647.",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246068/5.1_qnti9j.png",
    url1:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246067/5.2_jnbzq7.png",
  },
  {title:"Números de punto flotante (o floating-point numbers) ",
    text:"En programación, que son usados para representar números reales. Estos incluyen tanto números enteros como decimales, y permiten representar valores fraccionarios y muy grandes o muy pequeños, en comparación con los enteros.",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246066/6.1_jbmhey.png",
    url1:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246065/6.2_zzhpm2.png",
  },
  {title:"Booleans",
    text:"Los valores booleanos son fundamentales en programación para representar condiciones y realizar operaciones de lógica. En Java (y en muchos otros lenguajes), los valores booleanos solo pueden ser true (verdadero) o false (falso).",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730418633/7.4_tysdap.png",
    url1:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730418633/7.3_kmqvsq.png",
    url2:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246064/7.2_kiw5mi.png",
  },
  {title:"Operadores de comparación",
    text:"Los operadores de comparación devuelven un valor booleano (true o false) en función de si la condición es verdadera o falsa.",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246062/8.1_aawxaq.png",
    url1:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246061/8.2_pl8fwt.png",
  },
  {title:"Impresión en Java (printing)",
    text:"Los métodos de impresión en Java se utilizan para mostrar texto u otros valores en la consola. Estos métodos son parte de la clase System.out, que es una herramienta estándar para la salida en consola en Java.",
    text1:"System.out.print(String s): Imprime el contenido de s (cadena o cualquier otro valor convertido a texto) en la consola, pero no agrega una nueva línea al final. Si usas print varias veces, el siguiente valor se imprimirá justo al lado del anterior, sin salto de línea. ",
    text2:"System.out.println(String s): Imprime el contenido de s en la consola y agrega una nueva línea al final. Esto significa que cualquier impresión posterior comenzará en una nueva línea.",
    text3:"System.out.println(): No imprime ningún contenido, simplemente agrega una nueva línea en la consola. Es útil para crear espacios en blanco en la salida de la consola.",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246061/9_em7ick.png",

  },
  {title:"Métodos de conversión",
    text:"En Java se utilizan ciertós métodos para convertir cadenas de texto (String) a valores numéricos. Estos métodos son muy útiles cuando necesitas trabajar con números obtenidos como texto (por ejemplo, desde la entrada del usuario o archivos) y deseas realizar cálculos con ellos. ",
    text1:" La clase Math proporciona varias funciones matemáticas y constantes útiles.",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246059/10_inkvye.png",

  },
  {title:"Math",
    text:"La clase Math en Java es una herramienta muy poderosa para realizar operaciones matemáticas complejas de forma sencilla, sin la necesidad de implementar estas funciones desde cero. ",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246058/11_v70cac.png",
    link:"https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html",
    linkText:"The full java.lang.Math AP",
  },
  {title:"Java library",
    text:"La tabla en la imagen muestra ejemplos de llamadas a métodos en Java, sus bibliotecas de origen, los tipos de retorno y los valores resultantes",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246056/12_ulo6om.png",
    url1:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730473615/12.1_i9jay1.png",
  },
  {title:"Conversión de tipos",
    text:"La tabla muestra ejemplos de conversión de tipos en Java, donde ciertos valores y expresiones se convierten de un tipo de dato a otro explícita o implícitamente",
    text1:`Explicación de Algunas Conversiones`,
    textSub1a:`"Conversión Implícita a double: " Cuando se realiza una operación entre un int y un double (por ejemplo, 11 * 0.25), el resultado se convierte implícitamente a double.`,
    textSub1b:`"Casting (Conversión Explícita): " (int) 2.71828 convierte explícitamente el valor double 2.71828 a int, truncando los decimales. (int) (11 * 0.25) primero calcula 11 * 0.25, y luego convierte 2.75 a 2`,
    textSub1c:`"Redondeo con Math.round:" Math.round(2.71828) redondea el valor 2.71828 a 3 y lo devuelve como long. (int) Math.round(2.71828) convierte el valor long 3 a int. `,
    textSub1d:`"Concatenación de String y int: " '1234' + 99 convierte 99 a String automáticamente y luego lo concatena, resultando en '123499'.`,
    textSub1e:`"Métodos de Conversión:" Integer.parseInt('1234') convierte la cadena '1234' a un valor int de 1234`,
    text2:`Las conversiones de tipo en Java permiten "transformar valores entre diferentes tipos de datos, ya sea automáticamente (conversión implícita) o mediante casting explícito". Esto es fundamental cuando se trabaja con expresiones de distintos tipos de datos.`,
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730473616/13.1_wubvcz.png",
  },

  {title:"Sentencias if y if-else",
    text:"Las sentencias if y if-else permiten a los programas Java tomar decisiones y ejecutar diferentes bloques de código según condiciones específicas. Esto es fundamental para manejar errores (como divisiones por cero) o realizar cálculos condicionales, como en la fórmula cuadrática.",
    text1:`"Valor Absoluto (absolute value)"`,
      textSub1a:`El código **if (x < 0) x = -x;** verifica si x es negativo. Si es así, convierte x en positivo al asignarle -x.`,
    text2:`"Intercambiar Valores para Ordenar "`,
      textSub2a:`El bloque **if (x > y) { int t = x; x = y; y = t; }** intercambia los valores de x y y usando una variable temporal t si x es mayor que y. Esto asegura que x contenga el menor valor y y el mayor.`,
    text3:`"Máximo de x y y"`,
      textSub3a:`La estructura **if (x > y) max = x; else max = y;** verifica cuál de los dos valores es mayor. Si x es mayor que y, max se asigna a x; de lo contrario, max se asigna a y.`,
    text4:`"Chequeo de Error en División"`,
      textSub4a:`**if (den == 0) System.out.println("Division by zero")**; else System.out.println("Quotient = " + num/den); verifica si el denominador den es 0. Si es 0, muestra un mensaje de error ("Division by zero"); de lo contrario, calcula e imprime el cociente num/den`,
    text5:`"Chequeo de Error en Fórmula Cuadrática"`,
      textSub5a:`Este ejemplo usa el discriminante  b*b - 4.0*c para determinar si la ecuación cuadrática tiene raíces reales. Si el discriminante es negativo, se imprime "No real roots". Si el discriminante es positivo o cero, se calculan las raíces usando la fórmula cuadrática y se imprimen.`,
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246051/15_pqvnp8.png",
    url1:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730487814/15.1_yd8kjs.png",
  },
  {title:"if-else anidada",
    text:"Las sentencias if-else anidadas son útiles para manejar condiciones múltiples y asignar valores específicos según diferentes rangos o categorías, como se muestra en este ejemplo con tasas de impuestos o ingresos.:",
    text1:"Este tipo de estructura de if-else anidado permite verificar varias condiciones en un orden secuencial. En este caso:",
      textSub1a:`Se examina el valor de income de menor a mayor.`,
      textSub1b:`En el momento en que se cumple una condición if o else if, se asigna la tasa y se ignoran las demás condiciones.`,
      textSub1c:`La última condición else actúa como un caso por defecto, asegurando que si ninguna de las condiciones anteriores se cumple, se asignará la tasa del 39.6%.`,
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246053/16_rm44ym.png",
  },
  {title:"Bucle while",
    text:"Un bucle while en Java se compone de: 1) Una inicialización. 2) Una condición de continuación. 3) Un cuerpo que ejecuta el código en cada iteración. 4) Llaves opcionales si el cuerpo tiene solo una instrucción.",
  text1:`Este bucle permite repetir una operación mientras se cumpla una condición específica, y es común en situaciones donde no se conoce de antemano el número exacto de iteraciones necesarias.`,
    text2:"1) Inicialización (initialization): ",
      textSub2a:`Antes de comenzar el bucle, se inicializa una variable externa al bucle. En este caso, int "power = 1;" inicializa power con el valor 1. Esta inicialización es crucial, ya que power se usa dentro de la condición del bucle.`,
    text3:"2) Condición de Continuación (loop-continuation condition):",
      textSub3a:`La condición que evalúa si el bucle debe continuar ejecutándose. En este caso, la condición es "power <= n/2." Mientras power sea menor o igual a "n/2", el bucle continuará ejecutándose.`,
      textSub3b:`Si la condición es falsa al inicio o se vuelve falsa durante las iteraciones, el bucle termina.`,
    text4:"3) Cuerpo del Bucle (body):",
      textSub4a:`El código que se ejecuta en cada iteración del bucle. En este ejemplo, "power = 2 * power;" duplica el valor de power en cada iteración.`,
      textSub4b:`Esta actualización de power es necesaria para eventualmente hacer que la condición "power <= n/2" sea falsa y así terminar el bucle.`,
    text5:"4) Llaves ({}):",
      textSub5a:`Las llaves {} delimitan el cuerpo del bucle. Son opcionales si el cuerpo contiene solo una instrucción, como en este caso.`,
      textSub5b:`Sin embargo, usar llaves puede mejorar la legibilidad del código, incluso cuando el cuerpo contiene una sola instrucción.`,
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730498695/17-5_viordr.png",
  },
  {title:"Bucle for",
    text:"El bucle for es ideal para situaciones en las que se conoce de antemano el número de iteraciones necesarias. Vamos a detallar cada parte de este bucle for específico.",
    text1:`Un bucle for tiene una inicialización, una condición de continuación, un incremento/decremento, y un cuerpo que se ejecuta en cada iteración. Es ideal para recorrer un rango de valores cuando el número de iteraciones es conocido de antemano.`,
    text2:`Inicialización Externa:`,
    textSub2a:`"int power = 1;" Antes de iniciar el bucle, se inicializa la variable power fuera de la estructura for. Este valor se utiliza dentro del bucle y cambia con cada iteración.`,
    text3:`Declaración e Inicialización de la Variable de Control:`,
    textSub3a:`"for (int i = 0; ... )" Dentro del bucle for, se declara e inicializa la variable de control i con un valor de 0. Esta variable suele actuar como un contador para controlar el número de iteraciones.`,
    text4:`"Condición de Continuación del Bucle:"`,
    textSub4a:`"i <= n" Esta condición se evalúa antes de cada iteración. Si es true, el bucle se ejecuta; si es false, el bucle termina. En este caso, el bucle se ejecutará mientras i sea menor o igual a n.`,
    text5:`"Incremento (o Decremento):"`,
    textSub5a:`"i++" Al final de cada iteración, el valor de i se incrementa en 1. Esto permite que el bucle avance hacia el fin de la condición de continuación.`,
    text6:`"Cuerpo del Bucle (body):"`,
    textSub6a:`"{ System.out.println(i + " " + power); power = 2 * power; }" El código dentro de { } es el cuerpo del bucle y se ejecuta en cada iteración.`,
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246049/17_v92ijy.png",
    url1:"",
    url2:""
  },
  {title:"Bucles",
    text1:"Cada ejemplo de bucle demuestra diferentes maneras de usar los bucles en Java para realizar cálculos:",
      textSub1a:"while: Para repetir una acción hasta que se cumpla una condición.",
      textSub1b:"for: Para iterar sobre un rango de valores conocidos.",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246051/18_keo5ua.png",
    url1:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730500583/18.1_yrmwft.png",
    url2:""
  },
  {title:"Break",
    text:"La instrucción break en Java se utiliza para salir de un bucle antes de que complete todas sus iteraciones, en el momento en que se cumple una condición específica.",
    text1:"La instrucción break permite:",
      textSub1a:"-Salir de un bucle en el momento en que se cumpla una condición, optimizando el programa.",
      textSub1b:"-En este ejemplo, break permite detener el bucle for tan pronto como se encuentra un divisor de n, evitando iteraciones innecesarias.",
      textSub1c:"-Esta técnica es útil para mejorar la eficiencia del código, especialmente en algoritmos de búsqueda o verificación de condiciones como la primalidad.",
    text2:"Explicación del Código",
    textSub2a:`"1) Declaración de factor: "  **int factor; **declara la variable factor, que se usará para dividir n y ver si tiene divisores distintos de 1 y de sí mismo."`,
    textSub2b:`"2) Bucle for:" El bucle for recorre posibles divisores de n, comenzando desde factor = 2 y terminando en **factor <= n/factor.** La condición factor <= n/factor limita las iteraciones del bucle solo hasta la raíz cuadrada de n, ya que un número no puede tener un divisor mayor que su raíz cuadrada (excepto a sí mismo). `,
    textSub2c:`"3) Condición if dentro del bucle:" Dentro del bucle, se evalúa la condición **if (n % factor == 0).** Esta condición verifica si factor divide n sin dejar residuo, lo que significa que n no es primo. Si **n % factor == 0 es true, se ejecuta break,**  que termina el bucle inmediatamente. Esto significa que el código ya ha encontrado un divisor y n no es primo.`,
    textSub2d:`"4) Verificación después del bucle:" Después de que el bucle se interrumpe o termina normalmente, se verifica la condición **if (factor > n/factor).** Si esta condición es true, significa que no se encontró ningún divisor de n, y por lo tanto, n es primo. En este caso, el programa imprime **n + " is prime".**`,
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246047/19_hlnbvj.png",
  },
  {title:"Do while",
    text:"La imagen muestra un ejemplo de un bucle do-while en Java. Un bucle do-while es similar a un bucle while, pero con una diferencia importante: el código dentro del bloque do se ejecuta al menos una vez, independientemente de si la condición del bucle es verdadera o falsa al principio. Después de la primera ejecución, se evalúa la condición while, y si es verdadera, el bucle continúa ejecutándose.",
    text1:`Este bucle genera valores aleatorios para x y y en el rango de -1 a 1 y repite esta generación hasta que el punto (x, y) caiga dentro de un círculo de radio 1 centrado en el origen (0, 0).`,
    text2:`Generación de Valores Aleatorios para x y y:`,
      textSub2a:`1) x = 2.0 * Math.random() - 1.0;`,
      textSub2b:`2) y = 2.0 * Math.random() - 1.0;`,
      textSub2c:`3) Math.random() genera un número aleatorio entre 0.0 y 1.0. Multiplicarlo por 2.0 y restarle 1.0 transforma el valor al rango -1.0 a 1.0.`,
      textSub2d:`4) Así, cada vez que se ejecuta este bloque, x y y obtienen nuevos valores en el intervalo (-1, 1).`,
    text3:`Condición del Bucle while:`,
      textSub3a:`1) while (Math.sqrt(x*x + y*y) > 1.0);`,
      textSub3b:`2) Esta condición calcula la distancia de (x, y) al origen (0, 0) usando la fórmula de la distancia Euclidiana Math.sqrt(x*x + y*y).`,
      textSub3c:`3) Si la distancia es mayor que 1.0, el punto (x, y) se encuentra fuera del círculo de radio 1.`,
      textSub3d:`4) Mientras esta condición sea verdadera, el bucle do-while se repite, generando nuevos valores de x y y.`,
    text4:`Objetivo del Código:`,
      textSub4a:`1) El objetivo es encontrar un punto (x, y) aleatorio que esté dentro de un círculo de radio 1 centrado en (0, 0).`,
      textSub4b:`2) El bucle seguirá generando puntos hasta que encuentre uno que cumpla con la condición Math.sqrt(x*x + y*y) <= 1.0, es decir, un punto que caiga dentro del círculo.`,
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246046/20_p7tayh.png",
  },
  {title:"Swich",
    text:"La instrucción switch en Java es una estructura de control que permite seleccionar una de varias opciones basándose en el valor de una variable. En este caso, la estructura switch se utiliza para determinar el nombre de un día de la semana a partir de un número representado por la variable day.",
    text1:"Resumen",
      textSub1a:`-La instrucción switch es útil para reemplazar múltiples estructuras if-else cuando se evalúa una variable contra varios valores específicos.`,
      textSub1b:`"case:" Define un valor específico que la variable puede tener.`,
      textSub1c:`"break:" Evita que se ejecuten los casos siguientes al actual.`,
      textSub1d:`"default (no usado aquí):" Captura cualquier valor que no corresponda a ninguno de los casos anteriores.`,
    text2:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246045/21_nj63tl.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246044/22_kpdzqa.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246042/23_s0vnbm.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246041/24_htr1h7.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246040/25_y4bii3.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246039/26_jujw8g.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246037/27_tvuvhb.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246036/28.1_hnlcf7.png",
    url1:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246035/28.2_lxxdht.png",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246034/29_eobkq3.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246033/30_zwrlee.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246032/31_aevapu.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246030/32_dzeqyu.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246030/33_mqsjl8.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246017/34_ownenb.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730244415/35_zpqijt.png",
    url1:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730244308/35.2_e97xve.png",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246021/36.1_kosxw0.png",
    url1:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246028/36.2_qjvysm.png",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246018/37_mmoifu.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246022/38_pfcthq.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246025/39_p3tirt.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730244411/40_uzrha3.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730244413/41_qsalde.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730244412/42_qda8mt.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246017/43_xldd9m.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246026/44_zlnp89.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246020/45_i9kcqh.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246023/46_zakt0z.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730244306/47_kdgh9t.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730244305/48_q21iwx.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730246027/49_kjnpql.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730244411/50_xkuwse.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730244410/51_efy91m.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730244306/52_n5r9am.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730244308/53_osttsx.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730244304/54_gc5vwb.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730244303/55_numxol.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730244302/56_hsqali.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"https://res.cloudinary.com/dtv1oj9bq/image/upload/v1730244302/56_hsqali.png",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"",
    url1:"",
    url2:""
  },
  {title:"",
    text:"",
    url:"",
    url1:"",
    url2:""
  },
]

export default programationCheatsheetsData;